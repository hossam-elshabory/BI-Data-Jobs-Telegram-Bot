{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome To InJobBot","text":"<p>\ud83e\udd16 Weekly Posted LinkedIn Jobs In Your Telegram. \ud83e\udd16</p>"},{"location":"#about","title":"About","text":"<p>InJobBot automates job searching by scrapping Jobs posted on LinkedIn from the previous week and sends it in a telegram channel on schedule or by demand using a command in chat.</p> <p></p> Bot live demo."},{"location":"#getting-started","title":"Getting Started","text":"<p>You can get started by following the Tutorial - User Guide, to configure the bot get it working.</p> <p>Create my bot </p>"},{"location":"01_Tutorial%20-%20User%20Guide/01_creating_bot_token/","title":"How to Get Your Bot Token","text":"<p>To set up a new bot, you will need to talk to BotFather. No, he\u2019s not a person \u2013 he\u2019s also a bot, and he's the boss of all the Telegram bots.</p> <ol> <li> <p>Search for @botfather in Telegram.</p> <p> BotFather on telegram. </p> </li> <li> <p>Start a conversation with BotFather by clicking on the Start button.</p> <p> botfather chat. </p> </li> <li> <p>Type <code>/newbot</code>, and follow the prompts to set up a new bot. The BotFather will give you a token that you will use to authenticate your bot and grant it access to the Telegram API.</p> <p> Getting bot token. </p> </li> </ol> <p>Be Careful</p> <p>Make sure you store the token securely. Anyone with your token access can easily manipulate your bot.</p>"},{"location":"01_Tutorial%20-%20User%20Guide/02_cloning_repo/","title":"Downloading | Cloning the repository","text":""},{"location":"01_Tutorial%20-%20User%20Guide/02_cloning_repo/#downloading-the-repository","title":"Downloading the repository","text":"<p>Before setting up the bot you will need to download it locally and set it's configurations up. Head to the main repository page and download the repository.</p> <p></p> Downloading the bot."},{"location":"01_Tutorial%20-%20User%20Guide/02_cloning_repo/#cloning-the-repository","title":"Cloning the repository","text":"<p>You can also clone the repository using git.</p> <p>Cloning command</p> <pre><code>git clone https://github.com/hossam-elshabory/InJobBot.git\n</code></pre>"},{"location":"01_Tutorial%20-%20User%20Guide/03_configuring_bot/","title":"Configuring Bot Settings","text":"<p>Before you you start the bot or deploy it, you will need to configure it's settings. To do that you will have to create a <code>.env</code> file in the main directory and add the following settings in it.</p> <ol> <li> <p>BOT_TOKEN : The bot API_TOKEN you got from the bot father, if you haven't created one yet, follow this tutorial Create a bot with BotFather. </p> </li> <li> <p>OWNER : The username of the owner which will be able to control the bot while active.</p> <p>Note</p> <p>To get your telegram username, head to Settings &gt; Edit profile &gt; Username.</p> </li> <li> <p>CHANNEL_ID : The channel id the bot will post updated on.</p> </li> </ol> <p></p> .env file."},{"location":"01_Tutorial%20-%20User%20Guide/04_running_bot/","title":"Running the Bot","text":"<p>Before running the bot you will need first to install the dependencies.</p> <p>Installing requirements</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Then you can simply run the bot using python.</p> <p>Running the bot</p> <pre><code>python bot.py\n</code></pre>"},{"location":"02_Bot_Commands/01_commands/","title":"Commands list","text":""},{"location":"02_Bot_Commands/01_commands/#the-job-command","title":"The Job Command","text":"<p>InJobBot main functionality is to scrape jobs from LinkedIn, format it, and send it in Telegram chat Private | Group, which is done using the <code>/ljobs</code> command in telegram chat. If no arguments were passed to the <code>/ljobs</code> command; it will default to BI Data Analyst, Egypt search parameters.</p> Click to view <code>/ljobs</code> in action <p> InJobBot job command. </p>"},{"location":"02_Bot_Commands/01_commands/#helper-commands","title":"Helper Commands","text":"<p>InJobBot also comes with a set of helper commands like <code>/help</code> to display the help message for group members, <code>/tips</code> to display tips about setting your LinkedIn and GitHub profiles. More commands will be added in the future.</p> <p>Note</p> <p>The response to the <code>/help</code> command will differ depending on if the user is the owner of the bot, a group admin or a group member.</p>"},{"location":"02_Bot_Commands/01_commands/#commands-list_1","title":"Commands list","text":"<p>We are going to dive into each set of commands built into the bot. but for an overview here's a list of all the commands.</p> Command Description Owner Group Admin Group Member /help Display the help message. \u2705 \u2705 \u2705 /tips Display the tips message. \u2705 \u2705 \u2705 /check Check if bot is running. \u2705 \u274c \u274c /ljobs Searches LinkedIn for jobs default is BI Data Analyst Egypt. \u2705 \u2705 \u274c /ljobs job title, location Searches LinkedIn for job tile in location. \u2705 \u2705 \u274c /echo Echos back what ever you send it. \u2705 \u274c \u274c /addgroup group id Adds group to the allow list. \u2705 \u274c \u274c /rmgroup group id Removes group from allow list. \u2705 \u274c \u274c /getgroup Returns back a list of all allowed group id in database. \u2705 \u274c \u274c /getgroup group id Returns back the group id if it exists in the database. \u2705 \u274c \u274c"},{"location":"02_Bot_Commands/02_job_command/","title":"The job command","text":""},{"location":"02_Bot_Commands/02_job_command/#the-code-behind-the-command","title":"The Code Behind The Command","text":"<p>The core functionality and implementation behind the <code>/ljobs</code> command is handled by the <code>job_posts</code> modules. </p> <p>When the <code>/ljobs</code> command is called the <code>job_post_factory.py</code> module calls the <code>job_scrapper.py</code> module to send a request to LinkedIn jobs with the provided search parameters (job title, location) or the default search parameters BI Data Analyst, Egypt. if none was provided. </p> <p>Then the returned data is passed to the <code>TgJobPost</code> data class in the <code>job_post_creator.py</code> module to further parse and format the job data to make it ready for being sent in telegram chat using the <code>send_job_posts</code> function in the <code>job_post_sender.py</code> module.</p>"},{"location":"02_Bot_Commands/02_job_command/#the-job_post_factorypy-module","title":"The <code>job_post_factory.py</code> module","text":"Click to view the <code>job_post_factory.py</code> module <code>channel_jobs_updater(bot: TeleBot) -&gt; None</code> \u00b6 <p>summary : This function updates the job posting in the channel using the CHANNEL_ID variable from .env file</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>TeleBot</code> <p>description : bot instance</p> required Source code in <code>src/job_posts/job_post_factory.py</code> <pre><code>def channel_jobs_updater(bot: TeleBot) -&gt; None:\n\"\"\"_summary_ : This function updates the job posting in the channel using the CHANNEL_ID variable from .env file\n\n    Parameters\n    ----------\n    bot : TeleBot\n        _description_ : bot instance\n    \"\"\"\n    # Creating jobs using the jobs factory\n    jobs = jobs_factory()\n    # Sending jobs to the channel\n    send_job_posts(jobs, bot, channel_id=CHANNEL_ID)\n</code></pre> <code>job_scrapper(scrapper: LinkedinScrapper, search_params: tuple[str, str] = None) -&gt; list[dict]</code> \u00b6 <p>summary : This function creates the linkedin scrapper object and retrieves the formatted data.</p> <p>Parameters:</p> Name Type Description Default <code>scrapper</code> <code>LinkedinScrapper</code> <p>description : The linkedin scrapper object.</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>description : A list of dicts containing the scrapped jobs data for linkedin.</p> Source code in <code>src/job_posts/job_post_factory.py</code> <pre><code>def job_scrapper(\n    scrapper: LinkedinScrapper, search_params: tuple[str, str] = None\n) -&gt; list[dict]:\n\"\"\"_summary_ : This function creates the linkedin scrapper object and retrieves the formatted data.\n\n    Parameters\n    ----------\n    scrapper : LinkedinScrapper\n        _description_ : The linkedin scrapper object.\n\n    Returns\n    -------\n    list[dict]\n        _description_ : A list of dicts containing the scrapped jobs data for linkedin.\n    \"\"\"\n    # Creating the scrapper object.\n    scrapper = scrapper()\n\n    # If search parameters were provided unpack them and pass them to the scrapper object.\n    if search_params:\n        # Setting up the search parameters tuple(job title, location).\n        scrapper.set_search_params(*search_params)\n\n    # Starting the scrapping process\n    scrapper.scrape_jobs()\n\n    # Retuning the formatted_data attribute contain the scraped formatted data from linkedin.\n    return scrapper.formatted_data\n</code></pre> <code>jobs_factory(search_params: tuple[str, str] = None) -&gt; list[dict]</code> \u00b6 <p>summary : This function creates the scrapper object and the post creator objects.</p> <p>Returns:</p> Type Description <code>list[dict]</code> <p>description : A list of dict containing the formatted posts ready to send to telegram chat.</p> Source code in <code>src/job_posts/job_post_factory.py</code> <pre><code>def jobs_factory(search_params: tuple[str, str] = None) -&gt; list[dict]:\n\"\"\"_summary_ : This function creates the scrapper object and the post creator objects.\n\n    Returns\n    -------\n    list[dict]\n        _description_ : A list of dict containing the formatted posts ready to send to telegram chat.\n    \"\"\"\n    # If search parameters were passed as an argument pass them into the scrapper.\n    if search_params:\n        # Passing the scrapper to the job_scrapper function with the search parameters if provided.\n        jobs = job_scrapper(scrapper=LinkedinScrapper, search_params=search_params)\n    else:\n        # If no search parameters were provided, only pass the scrapper (will scrap for the default values)\n        jobs = job_scrapper(scrapper=LinkedinScrapper)\n\n    # Returning the created posts.\n    return post_creator(data=jobs, creator=TgJobPost)\n</code></pre> <code>post_creator(data: list[dict], creator: TgJobPost) -&gt; list[dict]</code> \u00b6 <p>summary : This function creates the telegram job post creator objects to create job posts for the telegram channel.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list[dict]</code> <p>description : A list of dict containing the jobs data.</p> required <code>creator</code> <code>TgJobPost</code> <p>description : The telegram job posts creator object.</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>description: A list of dict containing the formatted posts ready to send to telegram chat.</p> Source code in <code>src/job_posts/job_post_factory.py</code> <pre><code>def post_creator(data: list[dict], creator: TgJobPost) -&gt; list[dict]:\n\"\"\"_summary_ : This function creates the telegram job post creator objects to create job posts for the telegram channel.\n\n    Parameters\n    ----------\n    data : list[dict]\n        _description_ : A list of dict containing the jobs data.\n    creator : TgJobPost\n        _description_ : The telegram job posts creator object.\n\n    Returns\n    -------\n    list[dict]\n        _description_: A list of dict containing the formatted posts ready to send to telegram chat.\n    \"\"\"\n\n    # Creating the telegram job post creator object\n    creator = creator()\n\n    # Creating the job post using the 'create_post()' method\n    creator.create_posts(data)\n\n    # Retuning the created posts stored in the 'TgJobPost.posts' attribute\n    return creator.posts\n</code></pre> <p>The <code>job_post_factory</code> is the factory that handles creating the job posts process, from scrapping and parsing the data, formatting it for telegram messages, to sending it in chat. </p> <p>How does it work</p> <ol> <li>It calls the scrapper class <code>LinkedinScrapper</code> from the <code>job_scrapper.py</code> module.</li> <li>Passes the returned data from the <code>LinkedinScrapper</code> class to the <code>TgJobPost</code> class in the <code>job_post_creator.py</code> module to extract jobs information and format it for telegram. </li> <li>It uses the <code>send_job_posts</code> function from the <code>job_post_sender.py</code> module to send each created post as a separate message in the telegram chat.</li> </ol>"},{"location":"02_Bot_Commands/02_job_command/#the-job_scrapperpy-module","title":"The <code>job_scrapper.py</code> module","text":"<p>The <code>job_scrapper</code> module contains the <code>LinkedinScrapper</code> data class which scrapes and collects job posts, parses, and formats them. </p> <p>The <code>LinkedinScrapper</code> uses the requests library to send the request to LinkedIn, and BeautifulSoap to parse the HTML response. </p> Click to view the <code>LinkedinScrapper</code> data class <p>             Bases: <code>Scrapper</code></p> <p>summary : This data class scraps linkedin for the specified search key word and location in the .ev file.</p> Source code in <code>src/job_posts/job_scrapper.py</code> <pre><code>@dataclass(slots=True)\nclass LinkedinScrapper(Scrapper):\n\"\"\"_summary_ : This data class scraps linkedin for the specified search key word and location in the .ev file.\"\"\"\n\n    _job_tile: str = \"BI Data Analyst\"\n\n    _location: str = \"Egypt\"\n\n    # The url to send request to and get data back.\n    url: str = \"https://www.linkedin.com/jobs/search?keywords={JOB_TITLE}&amp;location={LOCATION}&amp;f_TPR=r604800\"\n\n    # Default list to hold raw html data.\n    raw_data: list[dict] = field(default_factory=list)\n\n    # Default list to hold parsed data.\n    parsed_data: list[tuple[str, str, str, str]] = field(default_factory=list)\n\n    # Default list to hold final formatted data ready for use.\n    formatted_data: list[dict] = field(default_factory=list)\n\n    def set_search_params(self, job_tile: str, location: str) -&gt; None:\n\"\"\"_summary_ :  This method sets the search parameters for the linkedin jobs.\n\n        Parameters\n        ----------\n        job_tile : str\n            _description_ : The jobs title to search linkedin jobs for.\n        location : str\n            _description_ : The location to search for jobs in.\n        \"\"\"\n        # Setting the job title instance variable.\n        self._job_tile = job_tile\n        # Setting the location instance variable.\n        self._location = location\n\n    def scrape_jobs(self) -&gt; None:\n\"\"\"This method start the scrapping process.\"\"\"\n\n        # Formatting the url with the job title and location.\n        self.url = self.url.format(JOB_TITLE=self._job_tile, LOCATION=self._location)\n\n        # Collecting the data.\n        self.collect_data()\n        # Parsing the data.\n        self.parse_data()\n        # Formatting the data.\n        self.format_data()\n\n    def collect_data(self):\n\"\"\"This Method sends calls the url using the request lib and gets back the data from linkedin\"\"\"\n        # Getting the response from the website.\n        response = requests.get(self.url)\n\n        # Parsing the response.\n        soup = BeautifulSoup(response.content, \"html.parser\")\n\n        # Getting the job cards.\n        html_data = soup.find_all(\n            \"div\",\n            class_=\"base-card relative w-full hover:no-underline focus:no-underline base-card--link base-search-card base-search-card--link job-search-card\",\n        )\n\n        # Returning the raw collected html data.\n        self.raw_data = html_data\n\n    def parse_data(self):\n\"\"\"This Method parses data and extracts the job's details.\"\"\"\n\n        # Getting the data out of the instance variable for clarity.\n        data = self.raw_data\n\n        # Looping over the raw html page data and extracting jobs details.\n        for job in data:\n            # Getting the job title.\n            job_title = job.find(\"h3\", class_=\"base-search-card__title\").text.strip()\n\n            # Getting the company name.\n            job_company = job.find(\n                \"h4\", class_=\"base-search-card__subtitle\"\n            ).text.strip()\n\n            # Getting the job location.\n            job_location = job.find(\n                \"span\", class_=\"job-search-card__location\"\n            ).text.strip()\n\n            # Getting the job link.\n            apply_link = job.find(\"a\", class_=\"base-card__full-link\")[\"href\"]\n\n            # Appending the job details to class variable list as a tuple.\n            self.parsed_data.append((job_title, job_company, job_location, apply_link))\n\n    def format_data(self):\n\"\"\"This Method formats data after being parsed into a desired format\"\"\"\n\n        # Getting the data out of the instance variable for clarity.\n        data = self.parsed_data\n\n        # Looping over the parsed data and formatting it, to be used by the TgJobPost class to create jobs posting posts for telegram.\n        for job in data:\n            # For each job in the data create a dict object that holds each job detail in a separate key.\n            job_details = {\n                # Getting the job title from the first item in the tuple.\n                \"job_title\": job[0],\n                # Getting the job company from the second item in the tuple\n                \"job_company\": job[1],\n                # Getting the job location from the third item in the tuple\n                \"job_location\": job[2],\n                # Getting the job link from the forth item in the tuple\n                \"apply_link\": job[3],\n            }\n            # Adding this dict to the formatted_data instance variable.\n            self.formatted_data.append(job_details)\n</code></pre> <code>collect_data()</code> \u00b6 <p>This Method sends calls the url using the request lib and gets back the data from linkedin</p> Source code in <code>src/job_posts/job_scrapper.py</code> <pre><code>def collect_data(self):\n\"\"\"This Method sends calls the url using the request lib and gets back the data from linkedin\"\"\"\n    # Getting the response from the website.\n    response = requests.get(self.url)\n\n    # Parsing the response.\n    soup = BeautifulSoup(response.content, \"html.parser\")\n\n    # Getting the job cards.\n    html_data = soup.find_all(\n        \"div\",\n        class_=\"base-card relative w-full hover:no-underline focus:no-underline base-card--link base-search-card base-search-card--link job-search-card\",\n    )\n\n    # Returning the raw collected html data.\n    self.raw_data = html_data\n</code></pre> <code>format_data()</code> \u00b6 <p>This Method formats data after being parsed into a desired format</p> Source code in <code>src/job_posts/job_scrapper.py</code> <pre><code>def format_data(self):\n\"\"\"This Method formats data after being parsed into a desired format\"\"\"\n\n    # Getting the data out of the instance variable for clarity.\n    data = self.parsed_data\n\n    # Looping over the parsed data and formatting it, to be used by the TgJobPost class to create jobs posting posts for telegram.\n    for job in data:\n        # For each job in the data create a dict object that holds each job detail in a separate key.\n        job_details = {\n            # Getting the job title from the first item in the tuple.\n            \"job_title\": job[0],\n            # Getting the job company from the second item in the tuple\n            \"job_company\": job[1],\n            # Getting the job location from the third item in the tuple\n            \"job_location\": job[2],\n            # Getting the job link from the forth item in the tuple\n            \"apply_link\": job[3],\n        }\n        # Adding this dict to the formatted_data instance variable.\n        self.formatted_data.append(job_details)\n</code></pre> <code>parse_data()</code> \u00b6 <p>This Method parses data and extracts the job's details.</p> Source code in <code>src/job_posts/job_scrapper.py</code> <pre><code>def parse_data(self):\n\"\"\"This Method parses data and extracts the job's details.\"\"\"\n\n    # Getting the data out of the instance variable for clarity.\n    data = self.raw_data\n\n    # Looping over the raw html page data and extracting jobs details.\n    for job in data:\n        # Getting the job title.\n        job_title = job.find(\"h3\", class_=\"base-search-card__title\").text.strip()\n\n        # Getting the company name.\n        job_company = job.find(\n            \"h4\", class_=\"base-search-card__subtitle\"\n        ).text.strip()\n\n        # Getting the job location.\n        job_location = job.find(\n            \"span\", class_=\"job-search-card__location\"\n        ).text.strip()\n\n        # Getting the job link.\n        apply_link = job.find(\"a\", class_=\"base-card__full-link\")[\"href\"]\n\n        # Appending the job details to class variable list as a tuple.\n        self.parsed_data.append((job_title, job_company, job_location, apply_link))\n</code></pre> <code>scrape_jobs() -&gt; None</code> \u00b6 <p>This method start the scrapping process.</p> Source code in <code>src/job_posts/job_scrapper.py</code> <pre><code>def scrape_jobs(self) -&gt; None:\n\"\"\"This method start the scrapping process.\"\"\"\n\n    # Formatting the url with the job title and location.\n    self.url = self.url.format(JOB_TITLE=self._job_tile, LOCATION=self._location)\n\n    # Collecting the data.\n    self.collect_data()\n    # Parsing the data.\n    self.parse_data()\n    # Formatting the data.\n    self.format_data()\n</code></pre> <code>set_search_params(job_tile: str, location: str) -&gt; None</code> \u00b6 <p>summary :  This method sets the search parameters for the linkedin jobs.</p> <p>Parameters:</p> Name Type Description Default <code>job_tile</code> <code>str</code> <p>description : The jobs title to search linkedin jobs for.</p> required <code>location</code> <code>str</code> <p>description : The location to search for jobs in.</p> required Source code in <code>src/job_posts/job_scrapper.py</code> <pre><code>def set_search_params(self, job_tile: str, location: str) -&gt; None:\n\"\"\"_summary_ :  This method sets the search parameters for the linkedin jobs.\n\n    Parameters\n    ----------\n    job_tile : str\n        _description_ : The jobs title to search linkedin jobs for.\n    location : str\n        _description_ : The location to search for jobs in.\n    \"\"\"\n    # Setting the job title instance variable.\n    self._job_tile = job_tile\n    # Setting the location instance variable.\n    self._location = location\n</code></pre>"},{"location":"02_Bot_Commands/02_job_command/#the-job_post_creatorpy-module","title":"The <code>job_post_creator.py</code> module","text":"<p>The <code>job_post_creator.py</code> module contains the <code>TgJobPost</code> data class which takes in a dictionary of lists (created by the <code>LinkedinScrapper</code> data class) containing the job title, company, location, and job post link. </p> <p>It creates a dictionary of two key:value paris for each job post as the following: <code>{job_details:str, job_link: str}</code>.</p> job_post_creator.py<pre><code># looping over the jobs data list[dict] and creating a [dict] for each job containing the 'job details' and the 'job links'.\nfor job in jobs_data:\n\n    # This is a dict that will hold the job details and the job links for each job.\n    post = {\n        # This key hold the job details formatted for posting using the post_template.\n\"job_details\": self.post_template.format(\njob[\"job_title\"],\njob[\"job_company\"],\njob[\"job_location\"],\n# Grab the first apply link for and embed it inside 'APPLY HERE'\n            ## Using Markdown syntax =&gt; [Text](Link to embed).\nf\"[ LINK \ud83d\udd17]({job['apply_link']})\",\n),\n        # This key hold the list of apply links for this job.\n\"job_link\": job[\"apply_link\"],\n}\n</code></pre> <p>\u2022 The job_details: contains the job information as a string.</p> <p>\u2022 The job_link: contains the job post URL on linkedin.</p> Click to view the <code>TgJobPost</code> data class <p>             Bases: <code>TgPost</code></p> <p>summary : This data class creates posts from the scrapped data.</p> Source code in <code>src/job_posts/job_post_creator.py</code> <pre><code>@dataclass(slots=True)\nclass TgJobPost(TgPost):\n\"\"\"_summary_ : This data class creates posts from the scrapped data.\"\"\"\n\n    # This is the template that will be used to create the post.\n    post_template: str = (\n        \"\u2022 *Job Title* : {} \\n\"\n        \"\u2022 *Company* : {} \\n\"\n        \"\u2022 *Location* : {} \\n\"\n        \"\u2022 *Job Link* : {} \\n\"\n    )\n\n    # This is a list that will hold the final posts.\n    posts: list = field(default_factory=list)\n\n    def create_posts(self, jobs_data: list[dict]) -&gt; list[dict]:\n\"\"\"_summary_ : This method loop over the jobs_data list and create a post for each job.\n\n        Parameters\n        ----------\n        jobs_data : list[dict]\n            _description_ : This is the list of jobs data that will be used to create the posts.\n\n        Returns\n        -------\n        list[dict]\n            _description_ : A list of dicts that contain 'job_details' and 'job_links' for each jobs.\n\n        \"\"\"\n        # looping over the jobs data list[dict] and creating a [dict] for each job containing the 'job details' and the 'job links'.\n        for job in jobs_data:\n\n            # This is a dict that will hold the job details and the job links for each job.\n            post = {\n                # This key hold the job details formatted for posting using the post_template.\n                \"job_details\": self.post_template.format(\n                    job[\"job_title\"],\n                    job[\"job_company\"],\n                    job[\"job_location\"],\n                    # Grab the first apply link for and embed it inside 'APPLY HERE'\n                    ## Using Markdown syntax =&gt; [Text](Link to embed).\n                    f\"[ LINK \ud83d\udd17]({job['apply_link']})\",\n                ),\n                # This key hold the list of apply links for this job.\n                \"job_link\": job[\"apply_link\"],\n            }\n\n            # Adding the formatted job into the 'self.posts' list of the class.\n            self.posts.append(post)\n</code></pre> <code>create_posts(jobs_data: list[dict]) -&gt; list[dict]</code> \u00b6 <p>summary : This method loop over the jobs_data list and create a post for each job.</p> <p>Parameters:</p> Name Type Description Default <code>jobs_data</code> <code>list[dict]</code> <p>description : This is the list of jobs data that will be used to create the posts.</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>description : A list of dicts that contain 'job_details' and 'job_links' for each jobs.</p> Source code in <code>src/job_posts/job_post_creator.py</code> <pre><code>def create_posts(self, jobs_data: list[dict]) -&gt; list[dict]:\n\"\"\"_summary_ : This method loop over the jobs_data list and create a post for each job.\n\n    Parameters\n    ----------\n    jobs_data : list[dict]\n        _description_ : This is the list of jobs data that will be used to create the posts.\n\n    Returns\n    -------\n    list[dict]\n        _description_ : A list of dicts that contain 'job_details' and 'job_links' for each jobs.\n\n    \"\"\"\n    # looping over the jobs data list[dict] and creating a [dict] for each job containing the 'job details' and the 'job links'.\n    for job in jobs_data:\n\n        # This is a dict that will hold the job details and the job links for each job.\n        post = {\n            # This key hold the job details formatted for posting using the post_template.\n            \"job_details\": self.post_template.format(\n                job[\"job_title\"],\n                job[\"job_company\"],\n                job[\"job_location\"],\n                # Grab the first apply link for and embed it inside 'APPLY HERE'\n                ## Using Markdown syntax =&gt; [Text](Link to embed).\n                f\"[ LINK \ud83d\udd17]({job['apply_link']})\",\n            ),\n            # This key hold the list of apply links for this job.\n            \"job_link\": job[\"apply_link\"],\n        }\n\n        # Adding the formatted job into the 'self.posts' list of the class.\n        self.posts.append(post)\n</code></pre>"},{"location":"02_Bot_Commands/02_job_command/#the-job_post_senderpy-module","title":"The <code>job_post_sender.py</code> module","text":"<p>This module has only one simple function, <code>send_job_posts</code>  which takes in the dictionary of list containing the job details and job link key, value pairs (Created by the <code>TgJobPost</code> data class) and sends each one in a separate message, with the job_details as the message body, and the job_link as an inline keyboard button directing to the job apply link. </p> Click to view the <code>send_job_posts</code> function <p>summary : Loops over the provided job post list and send each post in a separate message.</p> <p>Parameters:</p> Name Type Description Default <code>posts</code> <code>list[dict]</code> <p>description : The list of job posts created by the telegram post creator.</p> required <code>bot</code> <code>TeleBot</code> <p>description</p> required <code>msg</code> <code>Message</code> <p>description : The Message Object</p> <code>None</code> <code>channel_id</code> <code>str</code> <p>description, by default None : The channel id.</p> <code>None</code> Source code in <code>src/job_posts/job_post_sender.py</code> <pre><code>def send_job_posts(\n    posts: list[dict], bot: TeleBot, msg: Message = None, channel_id: str = None\n) -&gt; None:\n\"\"\"_summary_ : Loops over the provided job post list and send each post in a separate message.\n\n    Parameters\n    ----------\n    posts : list[dict]\n        _description_ : The list of job posts created by the telegram post creator.\n    bot : TeleBot\n        _description_\n    msg : Message\n        _description_ : The Message Object\n    channel_id : str, optional\n        _description_, by default None : The channel id.\n    \"\"\"\n\n    # Looping over the posts list and sending each post to the user.\n    for post in posts:\n        bot.send_message(\n            chat_id=channel_id or msg.chat.id,\n            text=post[\"job_details\"],\n            reply_markup=jobs_post_inline_kb(post[\"job_link\"]),\n            parse_mode=\"Markdown\",\n        )\n</code></pre> <p>The <code>send_job_posts</code> function uses the <code>jobs_post_inline_kb</code> function from the keyboards module folder to create the inline keyboard.</p> Click to view the <code>jobs_post_inline_kb</code> function <p>summary : This function creates the inline keyboard markup for the job links.</p> <p>Parameters:</p> Name Type Description Default <code>job_link</code> <code>str</code> <p>description : job link URL.</p> required <p>Returns:</p> Type Description <code>InlineKeyboardMarkup</code> <p>description : The inline keyboard markup for the job links.</p> Source code in <code>src/tgbot/keyboards/inline/inline_keyboards.py</code> <pre><code>def jobs_post_inline_kb(job_link: str) -&gt; InlineKeyboardMarkup:\n\"\"\"_summary_ : This function creates the inline keyboard markup for the job links.\n\n    Parameters\n    ----------\n    job_link : str\n        _description_ : job link URL.\n\n    Returns\n    -------\n    InlineKeyboardMarkup\n        _description_ : The inline keyboard markup for the job links.\n    \"\"\"\n\n    # Creating the inline keyboard markup instance, for the job links.\n    inline_kb = InlineKeyboardMarkup()\n\n    # Setting the keyboard row width to 1; so the links will be displayed in one row.\n    inline_kb.row_width = 1\n\n    inline_kb.add(\n        InlineKeyboardButton(\"\ud83d\udc46 Click Here To Apply \ud83d\udc46\", url=job_link),\n    )\n\n    # Returning the inline keyboard markup.\n    return inline_kb\n</code></pre>"},{"location":"02_Bot_Commands/02_job_command/#using-the-command","title":"Using The Command","text":"<p>The <code>ljobs</code> command can be used alone or with arguments (search parameters) to scrap LinkedIn jobs for last week posted jobs returning each job in a separate message with the job information and the job link for applying. </p>"},{"location":"02_Bot_Commands/02_job_command/#default-search","title":"Default Search","text":"<p>If the <code>/ljobs</code> command was sent in chat without any arguments or search parameters it will default to searching for BI Data Analyst Roles in Egypt like in the following GIF.</p> <p> /ljobs command. </p>"},{"location":"02_Bot_Commands/02_job_command/#searching-with-arguments","title":"Searching With Arguments","text":"<p>The <code>/ljob</code> command also supports custom job search by providing search parameters after the command in chat following the <code>job title, location</code> pattern | format as demonstrated in the following GIF.</p> <p> /ljobs command with parameters. </p> <p>Please note that</p> <p>If you don't follow the <code>job title, location</code> pattern the bot will through an error telling you that this is an invalid search pattern, specifying the correct one to follow.</p>"},{"location":"02_Bot_Commands/02_job_command/#search-format-pattern","title":"Search Format | Pattern","text":"<p>The <code>/ljob</code> command uses python's Regex library to verify the provided search parameters using <code>param_validator</code> function in the <code>job_commands.py</code> module.</p> <p>The <code>param_validator</code> function does the validation using the following pattern.</p> param_validator function<pre><code># Compiling the command valid pattern.\npattern = re.compile(r\"\\D+,\\D+\")\n</code></pre> Click to view the <code>param_validator</code> function <p>summary : This function takes in the job command parameter and validates it.</p> <p>Parameters:</p> Name Type Description Default <code>parameter</code> <code>str</code> <p>description : The parameter extracted from the message.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>description : True if is valid, False it not.</p> Source code in <code>src/tgbot/commands/job_commands.py</code> <pre><code>def param_validator(parameter: str) -&gt; bool:\n\"\"\"_summary_ : This function takes in the job command parameter and validates it.\n\n    Parameters\n    ----------\n    parameter : str\n        _description_ : The parameter extracted from the message.\n\n    Returns\n    -------\n    bool\n        _description_ : True if is valid, False it not.\n    \"\"\"\n    # Compiling the command valid pattern.\n    pattern = re.compile(r\"\\D+,\\D+\")\n\n    # lowering the param case and removing spaces.\n    params = parameter.lower().replace(\" \", \"\")\n\n    # Checking if passed parameters is valid of not, and returning the result as a bool True | False.\n    return bool(re.search(pattern, params))\n</code></pre> <p>Here's a live example of the bot's behavior when provided with invalid parameters.  </p> <p> /ljobs command pattern validator. </p>"},{"location":"02_Bot_Commands/03_allow_list_commands/","title":"Group Allow List Commands","text":"<p>InJobBot can be added into groups and used by the owner or group admin to send jobs in chat or by group chat members (normal members) to view help and tips messages. </p> <p>However, to prevent the abuse of the bot, it has a table in the database which is created on deployment or activation that has the list of groups id's that the bot is allowed to be added to. </p> <p>If the bot was added to a group which is not in the database; it will leave. </p> Click to view the allow_list schema being created persistence.py<pre><code>class UsersDatabase(IPersistenceLayer):\n\"\"\"This class sits between the database commands and the database manger class\"\"\"\n\n    def __init__(self) -&gt; None:\n\"\"\"_summary_ : This creates the 2 tables 'users' and 'allow_list'\"\"\"\n        # Table name to be created if not existing\n        self.table_name = \"bot_users\"\n        # Initiating the data base users\n        self.db = DatabaseManger(\"bot_db.sqlite\")\n\n        # Creating the table 'bot_users' in the database\n        self.db.create_table(\n            self.table_name,\n            {\n                # \"id\": \"integer primary key autoincrement\",\n                \"user_id\": \"text primary key not null\",\n                \"block_type\": \"text not null\",\n                \"date_added\": \"text not null\",\n            },\n        )\n        # Creating the allowlist table\nself.db.create_table(\n\"allow_list\",\n{\n\"group_id\": \"text primary key not null\",\n},\n)\n</code></pre> <p>This can be controlled by the bot's owner using the following commands.  </p>"},{"location":"02_Bot_Commands/03_allow_list_commands/#adding-a-group-to-the-list","title":"Adding A Group To The List","text":"<p>The <code>/addgroup</code> command followed by the group chat id will add the group to the database. This command calls the <code>execute()</code> method on the the <code>AddGroupToAllowListCommand(group_id)</code> database command; adding the group to the allow_list table.</p> <p> /addgroup command. </p> Click to view the <code>AddGroupToAllowListCommand()</code> database command class <p>             Bases: <code>ICommand</code></p> <p>This command adds a group to the allow_list</p> Source code in <code>src/database/db_commands.py</code> <pre><code>class AddGroupToAllowListCommand(ICommand):\n\"\"\"This command adds a group to the allow_list\"\"\"\n\n    def __init__(self, *, group_id: str) -&gt; None:\n\"\"\"_summary_ : This method gets the data to initiate the command to add group to the bot's allow list.\n\n        Parameters\n        ----------\n        group_id : str\n            _description_ : The group_id to allow.\n        \"\"\"\n        self.group_id = group_id\n\n    def execute(self) -&gt; None:\n\"\"\"This method adds group\"\"\"\n        # Calling the add_to_allow_list with the group's chat_id.\n        persistence.add_to_allow_list(self.group_id)\n</code></pre> <code>__init__(*, group_id: str) -&gt; None</code> \u00b6 <p>summary : This method gets the data to initiate the command to add group to the bot's allow list.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>description : The group_id to allow.</p> required Source code in <code>src/database/db_commands.py</code> <pre><code>def __init__(self, *, group_id: str) -&gt; None:\n\"\"\"_summary_ : This method gets the data to initiate the command to add group to the bot's allow list.\n\n    Parameters\n    ----------\n    group_id : str\n        _description_ : The group_id to allow.\n    \"\"\"\n    self.group_id = group_id\n</code></pre> <code>execute() -&gt; None</code> \u00b6 <p>This method adds group</p> Source code in <code>src/database/db_commands.py</code> <pre><code>def execute(self) -&gt; None:\n\"\"\"This method adds group\"\"\"\n    # Calling the add_to_allow_list with the group's chat_id.\n    persistence.add_to_allow_list(self.group_id)\n</code></pre>"},{"location":"02_Bot_Commands/03_allow_list_commands/#removing-a-group-from-the-list","title":"Removing A Group From The List","text":"<p>The <code>/rmgroup</code> command followed by the group chat id will remove the group from the database. This command calls the <code>execute()</code> method on the the <code>DeleteGroupCommand(group_id)</code> database command; removing the group from the allow_list table.</p> <p> /rmgroup command. </p> Click to view the <code>DeleteGroupCommand()</code> database command class <p>             Bases: <code>ICommand</code></p> <p>This command deletes Groups from the database.</p> Source code in <code>src/database/db_commands.py</code> <pre><code>class DeleteGroupCommand(ICommand):\n\"\"\"This command deletes Groups from the database.\"\"\"\n\n    def __init__(self, *, group_id: str) -&gt; None:\n\"\"\"_summary_ : This method gets the data to initiate the command to delete group from database.\n\n        Parameters\n        ----------\n        group_id : str\n            _description_ : Group's id.\n        \"\"\"\n        self.group_id = group_id\n\n    def execute(self):\n\"\"\"This method deletes the user from the database using the provided criteria.\"\"\"\n        # Calling the delete_group method with the group's chat_id.\n        persistence.delete_group(self.group_id)\n</code></pre> <code>__init__(*, group_id: str) -&gt; None</code> \u00b6 <p>summary : This method gets the data to initiate the command to delete group from database.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>description : Group's id.</p> required Source code in <code>src/database/db_commands.py</code> <pre><code>def __init__(self, *, group_id: str) -&gt; None:\n\"\"\"_summary_ : This method gets the data to initiate the command to delete group from database.\n\n    Parameters\n    ----------\n    group_id : str\n        _description_ : Group's id.\n    \"\"\"\n    self.group_id = group_id\n</code></pre> <code>execute()</code> \u00b6 <p>This method deletes the user from the database using the provided criteria.</p> Source code in <code>src/database/db_commands.py</code> <pre><code>def execute(self):\n\"\"\"This method deletes the user from the database using the provided criteria.\"\"\"\n    # Calling the delete_group method with the group's chat_id.\n    persistence.delete_group(self.group_id)\n</code></pre>"},{"location":"02_Bot_Commands/03_allow_list_commands/#getting-groups-in-the-list","title":"Getting Groups In The List","text":"<p>The <code>/getgroups</code> command will list all the groups in the database. This command calls the <code>execute()</code> method on the the <code>GetGroupCommand(group_id)</code> database command; listing all the groups in the allow_list table.</p> <p>Note</p> <p>Following the <code>/getgroups</code> command by the group chat id; will return the group id back if it exists in the database. </p> <p> /getgroup command. </p> Click to view the <code>GetGroupCommand()</code> database command class <p>             Bases: <code>ICommand</code></p> <p>This command sends a 'SELECT' query to the allow_list database returning with group in it.</p> Source code in <code>src/database/db_commands.py</code> <pre><code>class GetGroupCommand(ICommand):\n\"\"\"This command sends a 'SELECT' query to the allow_list database returning with group in it.\"\"\"\n\n    def __init__(self, *, group_id: str = None, order_by=\"date_added\") -&gt; None:\n\"\"\"_summary_ : This method gets the data to initiate the command to get user from database using group_id as a selection criteria and sort the results back using 'date_added' attribute (columns).\n\n        Parameters\n        ----------\n        group_id : str\n            _description_ : group_id.\n        order_by : str, optional\n            _description_, by default \"date_added\" : The criteria in which to sort the returned query results.\n        \"\"\"\n        # Setting the order_by criteria. By default will sort by date_added\n        self.order_by = order_by\n        # Setting the user's group_id\n        self.group_id = group_id\n\n    def execute(self) -&gt; list:\n\"\"\"This method executes the 'SELECT' statement.\"\"\"\n        # Calling the get_group method with the group's chat_id.\n        return persistence.get_group(group_id=self.group_id)\n</code></pre> <code>__init__(*, group_id: str = None, order_by: str = 'date_added') -&gt; None</code> \u00b6 <p>summary : This method gets the data to initiate the command to get user from database using group_id as a selection criteria and sort the results back using 'date_added' attribute (columns).</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>description : group_id.</p> <code>None</code> <code>order_by</code> <code>str</code> <p>description, by default \"date_added\" : The criteria in which to sort the returned query results.</p> <code>'date_added'</code> Source code in <code>src/database/db_commands.py</code> <pre><code>def __init__(self, *, group_id: str = None, order_by=\"date_added\") -&gt; None:\n\"\"\"_summary_ : This method gets the data to initiate the command to get user from database using group_id as a selection criteria and sort the results back using 'date_added' attribute (columns).\n\n    Parameters\n    ----------\n    group_id : str\n        _description_ : group_id.\n    order_by : str, optional\n        _description_, by default \"date_added\" : The criteria in which to sort the returned query results.\n    \"\"\"\n    # Setting the order_by criteria. By default will sort by date_added\n    self.order_by = order_by\n    # Setting the user's group_id\n    self.group_id = group_id\n</code></pre> <code>execute() -&gt; list</code> \u00b6 <p>This method executes the 'SELECT' statement.</p> Source code in <code>src/database/db_commands.py</code> <pre><code>def execute(self) -&gt; list:\n\"\"\"This method executes the 'SELECT' statement.\"\"\"\n    # Calling the get_group method with the group's chat_id.\n    return persistence.get_group(group_id=self.group_id)\n</code></pre>"},{"location":"02_Bot_Commands/04_help_and_tips_commands/","title":"The Help And Tips Commands","text":""},{"location":"02_Bot_Commands/04_help_and_tips_commands/#the-owner-help-command","title":"The Owner Help Command","text":"<p>If you are the owner of the bot you can send a <code>/help</code> command in the private chat with the bot or in a group a bot is in, and the bot will reply with a message containing all the commands you as an (Owner) can use.</p> <p> owner's /help command. </p> <p>Note</p> <p>The reply to the <code>/help</code> command will differ to group admins and normal group members. Only the bot's owner set in the bot configuration .env file will get the command list help message.</p>"},{"location":"02_Bot_Commands/04_help_and_tips_commands/#editing-the-help-and-tips-message","title":"Editing The Help and Tips Message","text":"<p>You can edit the help and tips message sent to group members in the <code>chat_helper.py</code> module located in src/tgbot/utilities/chat_helper.py.</p> chat_helper.py<pre><code>    \"help\": [\n\"I search linkedin for *Jobs\ud83d\udcbc* posted last week and send them in chat.\\nI also have some tips for you, send me a /tips command to view them.\",\n        \"I can tell you what *Jobs \ud83d\udcbc* posted on linkedin last week.\\nYou can send me a /tips command to view some tips.\",\n    ],\n\"tips\": [\n\"Landing a job could be challenging if you are not well prepared, so, here are some tips:\\n\\n\ud83d\udd30 _Follow this guide to setup your GitHub profile_. [HERE](https://www.sitepoint.com/github-profile-readme/)\\n\ud83d\udd30 Follow this guide to setup your LinkedIn profile. [HERE](https://www.linkedin.com/business/talent/blog/product-tips/linkedin-profile-summaries-that-we-love-and-how-to-boost-your-own)\",\n        \"Finding a job might be difficult if you are not properly prepared, so here are some pointers.\\n\\n\ud83d\udd30 _Setup your GitHub profile by following this tutorial_. [HERE](https://www.sitepoint.com/github-profile-readme/)\\n\ud83d\udd30 To set up your LinkedIn profile, follow this tutorial.[HERE](https://www.linkedin.com/business/talent/blog/product-tips/linkedin-profile-summaries-that-we-love-and-how-to-boost-your-own)\",\n    ]\n</code></pre>"},{"location":"03_Database_Design/01_database_design/","title":"Bot's Database","text":""},{"location":"03_Database_Design/01_database_design/#design-pattern","title":"Design Pattern","text":"<p>The interaction with the database is done using a variation of the command design pattern, the implementation is inspired and derived from the Practices Of The Python Pro Book..</p> Click to view the UML diagram of the implementation <p> Database UML diagram. </p>"},{"location":"03_Database_Design/01_database_design/#pattern-interfaces","title":"Pattern Interfaces","text":""},{"location":"03_Database_Design/01_database_design/#commands-interface","title":"Commands Interface","text":"<p>The invokers call and execute commands which are concrete classes implementing the <code>ICommand</code> interface that has an <code>execute()</code> method.</p> Click to View the <code>ICommand</code> Interface <p>             Bases: <code>Protocol</code></p> <p>This protocol abstracts the implementation of the predefined database commands classes</p> Source code in <code>src/database/db_commands.py</code> <pre><code>class ICommand(Protocol):\n\"\"\"This protocol abstracts the implementation of the predefined database commands classes\"\"\"\n\n    def execute(self):\n\"\"\"Implement the command execution\"\"\"\n</code></pre> <code>execute()</code> \u00b6 <p>Implement the command execution</p> Source code in <code>src/database/db_commands.py</code> <pre><code>def execute(self):\n\"\"\"Implement the command execution\"\"\"\n</code></pre>"},{"location":"03_Database_Design/01_database_design/#persistence-interface","title":"Persistence Interface","text":"<p>Each command calls a corresponding method in the Persistence class which is a concrete class implementing the <code>IPersistenceLayer</code> interface controlling the <code>DatabaseManger</code> class.</p> Click to View the <code>IPersistenceLayer</code> Interface <p>             Bases: <code>ABC</code></p> <p>An abstracted interface for the database controller</p> Source code in <code>src/database/persistence.py</code> <pre><code>class IPersistenceLayer(ABC):\n\"\"\"An abstracted interface for the database controller\"\"\"\n\n    @abstractmethod\n    def add_user(self, data) -&gt; None:\n        raise NotImplementedError(\"Database Controller must implement a create method\")\n\n    @abstractmethod\n    def add_to_allow_list(self, data) -&gt; None:\n        raise NotImplementedError(\"Database Controller must implement a create method\")\n\n    @abstractmethod\n    def get_user(self, order_by: str = None) -&gt; list:\n        raise NotImplementedError(\"Database Controller must implement a get method\")\n\n    @abstractmethod\n    def get_group(self, order_by: str = None) -&gt; list:\n        raise NotImplementedError(\"Database Controller must implement a get method\")\n\n    @abstractmethod\n    def edit(self, id: str) -&gt; None:\n        raise NotImplementedError(\"Database Controller must implement a edit method\")\n\n    @abstractmethod\n    def delete(self, id: str) -&gt; None:\n        raise NotImplementedError(\"Database Controller must implement a delete method\")\n</code></pre>"},{"location":"03_Database_Design/01_database_design/#pattern-implementation","title":"Pattern Implementation","text":""},{"location":"03_Database_Design/01_database_design/#concrete-commands","title":"Concrete Commands","text":"<p>After defining the the <code>ICommand</code> interface, we can easily create concrete command classes that implement it's functionality, the following is an example of the <code>AddUserCommand()</code> command.</p> Click to view the <code>AddUserCommand()</code> concrete class <p>             Bases: <code>ICommand</code></p> <p>The command adds a new user to the database using the INSERT INTO SQL statement.</p> Source code in <code>src/database/db_commands.py</code> <pre><code>class AddUserCommand(ICommand):\n\"\"\"The command adds a new user to the database using the INSERT INTO SQL statement.\"\"\"\n\n    def __init__(self, *, user_id: str, block_type: str) -&gt; None:\n\"\"\"_summary_ : This method gets the data to initiate the command to add a user to the database.\n\n        Parameters\n        ----------\n        user_id : str\n            _description_ : User's user_id.\n        block_type : str\n            _description_ : User's block type (temp | perm).\n        \"\"\"\n        # Storing the user's id.\n        self.user_id = user_id\n        # Lowering the block time string, and stripping it from any leading|tailing space.\n        self.block_type = (block_type.lower()).strip()\n\n    def execute(self) -&gt; None:\n\"\"\"This method executes the 'INSERT INTO' statement.\"\"\"\n        # Calling the add_user method with the user's_id and his/her block type.\n        persistence.add_user(self.user_id, self.block_type)\n</code></pre> <code>__init__(*, user_id: str, block_type: str) -&gt; None</code> \u00b6 <p>summary : This method gets the data to initiate the command to add a user to the database.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>description : User's user_id.</p> required <code>block_type</code> <code>str</code> <p>description : User's block type (temp | perm).</p> required Source code in <code>src/database/db_commands.py</code> <pre><code>def __init__(self, *, user_id: str, block_type: str) -&gt; None:\n\"\"\"_summary_ : This method gets the data to initiate the command to add a user to the database.\n\n    Parameters\n    ----------\n    user_id : str\n        _description_ : User's user_id.\n    block_type : str\n        _description_ : User's block type (temp | perm).\n    \"\"\"\n    # Storing the user's id.\n    self.user_id = user_id\n    # Lowering the block time string, and stripping it from any leading|tailing space.\n    self.block_type = (block_type.lower()).strip()\n</code></pre> <code>execute() -&gt; None</code> \u00b6 <p>This method executes the 'INSERT INTO' statement.</p> Source code in <code>src/database/db_commands.py</code> <pre><code>def execute(self) -&gt; None:\n\"\"\"This method executes the 'INSERT INTO' statement.\"\"\"\n    # Calling the add_user method with the user's_id and his/her block type.\n    persistence.add_user(self.user_id, self.block_type)\n</code></pre>"},{"location":"03_Database_Design/01_database_design/#concrete-persistence","title":"Concrete Persistence","text":"<p>The <code>UsersDatabase</code> concrete class is an implementation of the <code>IPersistenceLayer</code> interface which sits between the command classes and the <code>DatabaseManger</code> class that executes CURL SQL statements on the database. </p> <p>The <code>UsersDatabase</code> class is a lower level of abstraction acting on top of the <code>DatabaseManger</code> class with a predefined SQL statements designed specifically for the Users and allow groups list tables in the database.</p> Click to view the <code>UsersDatabase</code> class <p>             Bases: <code>IPersistenceLayer</code></p> <p>This class sits between the database commands and the database manger class</p> Source code in <code>src/database/persistence.py</code> <pre><code>class UsersDatabase(IPersistenceLayer):\n\"\"\"This class sits between the database commands and the database manger class\"\"\"\n\n    def __init__(self) -&gt; None:\n\"\"\"_summary_ : This creates the 2 tables 'users' and 'allow_list'\"\"\"\n        # Table name to be created if not existing\n        self.table_name = \"bot_users\"\n        # Initiating the data base users\n        self.db = DatabaseManger(\"bot_db.sqlite\")\n\n        # Creating the table 'bot_users' in the database\n        self.db.create_table(\n            self.table_name,\n            {\n                # \"id\": \"integer primary key autoincrement\",\n                \"user_id\": \"text primary key not null\",\n                \"block_type\": \"text not null\",\n                \"date_added\": \"text not null\",\n            },\n        )\n        # Creating the allowlist table\n        self.db.create_table(\n            \"allow_list\",\n            {\n                \"group_id\": \"text primary key not null\",\n            },\n        )\n\n    def add_user(self, user_id: str, block_type: str) -&gt; None:\n\"\"\"_summary_ : This methods adds users to the database.\n\n        Parameters\n        ----------\n        user_id : str\n            _description_ : user id.\n        block_type : str\n            _description_ : 'perm' for permanently block | 'temp' for temporary block\n        \"\"\"\n        # Getting the current date to be added as an attribute to the user record\n        date = datetime.now().strftime(\"%Y/%m/%d, %H:%M:%S\")\n        # Added the user to the database\n        self.db.add(\n            self.table_name,\n            {\"user_id\": user_id, \"block_type\": block_type, \"date_added\": date},\n        )\n\n    def add_to_allow_list(self, group_id: str) -&gt; None:\n\"\"\"_summary_ : This methods adds users to the database.\n\n        Parameters\n        ----------\n        group_id : str\n            _description_ : group_id to allow\n        \"\"\"\n        # Adds the user to the database\n        self.db.add(\n            \"allow_list\",\n            {\"group_id\": group_id},\n        )\n\n    def get_user(\n        self, user_id: str = None, block_type: str = None, order_by: str = None\n    ) -&gt; list:\n\"\"\"_summary_ : This methods selects users from the database.\n\n        Parameters\n        ----------\n        user_id : str, optional\n            _description_, by default None : user_id to filter by.\n        order_by : str, optional\n            _description_, by default None : Column name to order the query result by, be default it will be order by the date added.\n\n        Returns\n        -------\n        list\n            _description_ : A list of tuples containing each records\n        \"\"\"\n        # If a user_id and a block type were provided adds it to the select criteria.\n        if block_type:\n            select_criteria = {\"block_type\": block_type}\n        else:\n            # If no user_id was provided pass on an empty dict to the criteria parameter\n            select_criteria = {\"user_id\": user_id} if user_id else None\n\n        # Returning the list of records that fitted the query select criteria\n        return self.db.select(\n            self.table_name, criteria=select_criteria, order_by=order_by\n        ).fetchall()\n\n    def get_group(self, group_id: str = None, order_by: str = None) -&gt; list:\n\"\"\"_summary_ : This methods selects group from the database.\n\n        Parameters\n        ----------\n        group_id : str, optional\n            _description_, by default None : group_id to filter by.\n        order_by : str, optional\n            _description_, by default None : Column name to order the query result by, be default it will be order by the date added.\n\n        Returns\n        -------\n        list\n            _description_ : A list of tuples containing each records\n        \"\"\"\n        # If no group_id was provided pass on an empty dict to the criteria parameter\n        select_criteria = {\"group_id\": group_id} if group_id else None\n\n        # Returning the list of records that fitted the query select criteria\n        return self.db.select(\n            \"allow_list\", criteria=select_criteria, order_by=order_by\n        ).fetchall()\n\n    def edit(self, user_id: str, block_type: str):\n\"\"\"_summary_ : This method update the records in the database using the user user_id as a criteria.\n\n        Parameters\n        ----------\n        user_id : str\n            _description_ : user's user_id.\n        block_type : str\n            _description_ : The block type of the user perm for permanent | temp for temporary\n        \"\"\"\n        # Sending the update statement to the database\n        self.db.update(\n            self.table_name, {\"user_id\": user_id}, {\"block_type\": block_type}\n        )\n\n    def delete(self, user_id: str):\n\"\"\"_summary_ : This method deletes user from the database using his user_id as a criteria.\n\n        Parameters\n        ----------\n        user_id : str\n            _description_ : user's user_id.\n        \"\"\"\n        # Deleting the user record using his user_id as a filter criteria\n        self.db.delete(self.table_name, {\"user_id\": user_id})\n\n    def delete_group(self, group_id: str):\n\"\"\"_summary_ : This method deletes group from the database using his group_id as a criteria.\n\n        Parameters\n        ----------\n        group_id : str\n            _description_ : group's id.\n        \"\"\"\n        # Deleting the user record using his user_id as a filter criteria\n        self.db.delete(\"allow_list\", {\"group_id\": group_id})\n</code></pre> <code>__init__() -&gt; None</code> \u00b6 <p>summary : This creates the 2 tables 'users' and 'allow_list'</p> Source code in <code>src/database/persistence.py</code> <pre><code>def __init__(self) -&gt; None:\n\"\"\"_summary_ : This creates the 2 tables 'users' and 'allow_list'\"\"\"\n    # Table name to be created if not existing\n    self.table_name = \"bot_users\"\n    # Initiating the data base users\n    self.db = DatabaseManger(\"bot_db.sqlite\")\n\n    # Creating the table 'bot_users' in the database\n    self.db.create_table(\n        self.table_name,\n        {\n            # \"id\": \"integer primary key autoincrement\",\n            \"user_id\": \"text primary key not null\",\n            \"block_type\": \"text not null\",\n            \"date_added\": \"text not null\",\n        },\n    )\n    # Creating the allowlist table\n    self.db.create_table(\n        \"allow_list\",\n        {\n            \"group_id\": \"text primary key not null\",\n        },\n    )\n</code></pre> <code>add_to_allow_list(group_id: str) -&gt; None</code> \u00b6 <p>summary : This methods adds users to the database.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>description : group_id to allow</p> required Source code in <code>src/database/persistence.py</code> <pre><code>def add_to_allow_list(self, group_id: str) -&gt; None:\n\"\"\"_summary_ : This methods adds users to the database.\n\n    Parameters\n    ----------\n    group_id : str\n        _description_ : group_id to allow\n    \"\"\"\n    # Adds the user to the database\n    self.db.add(\n        \"allow_list\",\n        {\"group_id\": group_id},\n    )\n</code></pre> <code>add_user(user_id: str, block_type: str) -&gt; None</code> \u00b6 <p>summary : This methods adds users to the database.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>description : user id.</p> required <code>block_type</code> <code>str</code> <p>description : 'perm' for permanently block | 'temp' for temporary block</p> required Source code in <code>src/database/persistence.py</code> <pre><code>def add_user(self, user_id: str, block_type: str) -&gt; None:\n\"\"\"_summary_ : This methods adds users to the database.\n\n    Parameters\n    ----------\n    user_id : str\n        _description_ : user id.\n    block_type : str\n        _description_ : 'perm' for permanently block | 'temp' for temporary block\n    \"\"\"\n    # Getting the current date to be added as an attribute to the user record\n    date = datetime.now().strftime(\"%Y/%m/%d, %H:%M:%S\")\n    # Added the user to the database\n    self.db.add(\n        self.table_name,\n        {\"user_id\": user_id, \"block_type\": block_type, \"date_added\": date},\n    )\n</code></pre> <code>delete(user_id: str)</code> \u00b6 <p>summary : This method deletes user from the database using his user_id as a criteria.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>description : user's user_id.</p> required Source code in <code>src/database/persistence.py</code> <pre><code>def delete(self, user_id: str):\n\"\"\"_summary_ : This method deletes user from the database using his user_id as a criteria.\n\n    Parameters\n    ----------\n    user_id : str\n        _description_ : user's user_id.\n    \"\"\"\n    # Deleting the user record using his user_id as a filter criteria\n    self.db.delete(self.table_name, {\"user_id\": user_id})\n</code></pre> <code>delete_group(group_id: str)</code> \u00b6 <p>summary : This method deletes group from the database using his group_id as a criteria.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>description : group's id.</p> required Source code in <code>src/database/persistence.py</code> <pre><code>def delete_group(self, group_id: str):\n\"\"\"_summary_ : This method deletes group from the database using his group_id as a criteria.\n\n    Parameters\n    ----------\n    group_id : str\n        _description_ : group's id.\n    \"\"\"\n    # Deleting the user record using his user_id as a filter criteria\n    self.db.delete(\"allow_list\", {\"group_id\": group_id})\n</code></pre> <code>edit(user_id: str, block_type: str)</code> \u00b6 <p>summary : This method update the records in the database using the user user_id as a criteria.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>description : user's user_id.</p> required <code>block_type</code> <code>str</code> <p>description : The block type of the user perm for permanent | temp for temporary</p> required Source code in <code>src/database/persistence.py</code> <pre><code>def edit(self, user_id: str, block_type: str):\n\"\"\"_summary_ : This method update the records in the database using the user user_id as a criteria.\n\n    Parameters\n    ----------\n    user_id : str\n        _description_ : user's user_id.\n    block_type : str\n        _description_ : The block type of the user perm for permanent | temp for temporary\n    \"\"\"\n    # Sending the update statement to the database\n    self.db.update(\n        self.table_name, {\"user_id\": user_id}, {\"block_type\": block_type}\n    )\n</code></pre> <code>get_group(group_id: str = None, order_by: str = None) -&gt; list</code> \u00b6 <p>summary : This methods selects group from the database.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>description, by default None : group_id to filter by.</p> <code>None</code> <code>order_by</code> <code>str</code> <p>description, by default None : Column name to order the query result by, be default it will be order by the date added.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>description : A list of tuples containing each records</p> Source code in <code>src/database/persistence.py</code> <pre><code>def get_group(self, group_id: str = None, order_by: str = None) -&gt; list:\n\"\"\"_summary_ : This methods selects group from the database.\n\n    Parameters\n    ----------\n    group_id : str, optional\n        _description_, by default None : group_id to filter by.\n    order_by : str, optional\n        _description_, by default None : Column name to order the query result by, be default it will be order by the date added.\n\n    Returns\n    -------\n    list\n        _description_ : A list of tuples containing each records\n    \"\"\"\n    # If no group_id was provided pass on an empty dict to the criteria parameter\n    select_criteria = {\"group_id\": group_id} if group_id else None\n\n    # Returning the list of records that fitted the query select criteria\n    return self.db.select(\n        \"allow_list\", criteria=select_criteria, order_by=order_by\n    ).fetchall()\n</code></pre> <code>get_user(user_id: str = None, block_type: str = None, order_by: str = None) -&gt; list</code> \u00b6 <p>summary : This methods selects users from the database.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>description, by default None : user_id to filter by.</p> <code>None</code> <code>order_by</code> <code>str</code> <p>description, by default None : Column name to order the query result by, be default it will be order by the date added.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>description : A list of tuples containing each records</p> Source code in <code>src/database/persistence.py</code> <pre><code>def get_user(\n    self, user_id: str = None, block_type: str = None, order_by: str = None\n) -&gt; list:\n\"\"\"_summary_ : This methods selects users from the database.\n\n    Parameters\n    ----------\n    user_id : str, optional\n        _description_, by default None : user_id to filter by.\n    order_by : str, optional\n        _description_, by default None : Column name to order the query result by, be default it will be order by the date added.\n\n    Returns\n    -------\n    list\n        _description_ : A list of tuples containing each records\n    \"\"\"\n    # If a user_id and a block type were provided adds it to the select criteria.\n    if block_type:\n        select_criteria = {\"block_type\": block_type}\n    else:\n        # If no user_id was provided pass on an empty dict to the criteria parameter\n        select_criteria = {\"user_id\": user_id} if user_id else None\n\n    # Returning the list of records that fitted the query select criteria\n    return self.db.select(\n        self.table_name, criteria=select_criteria, order_by=order_by\n    ).fetchall()\n</code></pre>"},{"location":"03_Database_Design/01_database_design/#the-databasemanger","title":"The DatabaseManger","text":"<p>The <code>DatabaseManger</code> class initializes the connection with the database (sqlite3), and executes SQL statements on the database using CURL commands.</p> Click to View the <code>DatabaseManger</code> class <p>This class manges the connection to the sqlite database.</p> Source code in <code>src/database/db_manger.py</code> <pre><code>class DatabaseManger:\n\"\"\"This class manges the connection to the sqlite database.\"\"\"\n\n    def __init__(self, database_filename: Path) -&gt; None:\n\"\"\"_summary_ : Initializing a connection with the database.\n\n        Parameters\n        ----------\n        database_filename : Path\n            _description_ : A path to the database file to connect to, if doesn't exist, it will be created.\n        \"\"\"\n        self.connection = sqlite3.connect(database_filename, check_same_thread=False)\n\n    def __del__(self) -&gt; None:\n\"\"\"_summary_ : This method closes the connection with the database.\"\"\"\n        self.connection.close()\n\n    def _execute(self, statement: str, values: tuple[str] = None) -&gt; Cursor:\n\"\"\"_summary_ : This method executes SQL statements and returns back a Cursor object containing the query result if any.\n\n        Parameters\n        ----------\n        statement : str\n            _description_ : The SQL statement to execute on the database.\n        values : tuple[str], optional\n            _description_, by default None : Tuples containing the values to replace the placeholders with to prevent sql injection.\n\n        Returns\n        -------\n        Cursor\n            _description_ : A Cursor object containing the result of the query.\n        \"\"\"\n        # Opening a connection to the database using a context manger to automatically close when done\n        with self.connection:\n            # Create the cursor object\n            cursor = self.connection.cursor()\n            # Executing the received statement\n            cursor.execute(statement, values or [])\n            # Returning the cursor object to extract returned data if any\n            return cursor\n\n    def create_table(self, table_name: str, columns: dict[str, str]) -&gt; None:\n\"\"\"_summary_ : This method creates a table in the database if the table is note existing.\n\n        Parameters\n        ----------\n        table_name : str\n            _description_ : The name of the table to create.\n        columns : dict[str, str]\n            _description_ : A dict holding the columns names as a key and their types as the value\n\n        \"\"\"\n        # Creating a list of column followed by their data types from the provided dict\n        columns_with_types = [\n            f\"{column_name} {data_type}\" for column_name, data_type in columns.items()\n        ]\n\n        # Executing the table creation SQL statement using the provided table name and columns names\n        self._execute(\n            f\"\"\"\n                CREATE TABLE IF NOT EXISTS {table_name}\n                ({\", \".join(columns_with_types)});\n            \"\"\"\n        )\n\n    def add(self, table_name: str, data: dict[str, str]) -&gt; None:\n\"\"\"_summary_ : This method adds data into the database using the 'INSERT INTO' SQL statement.\n\n        Parameters\n        ----------\n        table_name : str\n            _description_ : Table name to perform the statement on.\n        data : dict[str, str]\n            _description_ : A dict of strings, specifying the columns names and the columns values to be added to the table.\n        \"\"\"\n        # Creating placeholders for the provided data\n        placeholders = \", \".join(\"?\" * len(data))\n        # Getting the columns names from the data: [dict] keys\n        column_names = \", \".join(data.keys())\n        # Getting the columns values from the data: [dict] values and storing them in a tuple to pass them to the _execute method\n        column_values = tuple(data.values())\n\n        # Executing the 'INSERT INTO' statement on the database, ignoring; if records already exists\n        self._execute(\n            f\"\"\"\n            INSERT OR IGNORE INTO {table_name}\n            ({column_names})\n            VALUES ({placeholders})\n            \"\"\",\n            column_values,\n        )\n\n    def select(\n        self, table_name: str, criteria: dict[str, str] = None, order_by: str = None\n    ) -&gt; Cursor:\n\"\"\"_summary_: : This method selects data from the database using the 'SELECT' SQL statement and returns back  data.\n\n        Parameters\n        ----------\n        table_name : str\n            _description_ : Table name to perform the statement on.\n        criteria : dict[str, str], optional\n            _description_, by default None : The criteria to use as a filter on the SELECT statement, passed as a dict =&gt; {keys(criteria) : values(values)}\n        order_by : str, optional\n            _description_, by default None : A column name to sort the returned query by, will map to the ORDER BY {order_by}\n\n        Returns\n        -------\n        Cursor\n            _description_ : A Cursor object containing the data back from the database of any.\n        \"\"\"\n        # Creating an empty dict if no criteria was provided\n        criteria = criteria or {}\n\n        # Creating the query 'SELECT' statement\n        query = f\"SELECT * FROM {table_name}\"\n\n        # If criteria was provided parse it and add placeholders for it\n        if criteria:\n            # Creating placeholders fro the provided criteria\n            placeholders = [f\"{column} = ?\" for column in criteria.keys()]\n            # Joining each statement with 'AND'\n            select_criteria = \" AND \".join(placeholders)\n            # Adding the 'select_criteria' to the query after the 'WHERE' SQL statement\n            query += f\" WHERE {select_criteria}\"\n\n        # If order_by was provided adds in a 'ORDER BY' SQL statement to sort the data\n        if order_by:\n            # Adding the 'ORDER BY' statement to the query followed by the column name to sort by\n            query += f\" ORDER BY {order_by}\"\n\n        # Executing the query and passing the criteria values to the cursor and returning back the results\n        return self._execute(query, tuple(criteria.values()))\n\n    def update(\n        self, table_name: str, criteria: dict[str, str], data: dict[str, str]\n    ) -&gt; None:\n\"\"\"_summary_ : This method updates data in the database using the 'UPDATE' statement.\n\n        Parameters\n        ----------\n        table_name : str\n            _description_ : Table name to perform the statement on.\n        criteria : dict[str, str]\n            _description_ : The criteria to use as a filter on the UPDATE statement, passed as a dict =&gt; {keys(criteria) : values(values)}\n        data : dict[str, str]\n            _description_ : The actual data to update\n        \"\"\"\n        # Creating placeholders for the update criteria\n        placeholders = [f\"{column} = ?\" for column in criteria]\n        # Joining the placeholders with the AND operator\n        update_criteria = \" AND \".join(placeholders)\n        # Creating placeholders for the update data\n        data_placeholders = \", \".join(f\"{key} = ?\" for key in data)\n        # Creating two tuples holding the values to update and the new data to update them with\n        values = tuple(data.values()) + tuple(criteria.values())\n        # Executing the UPDATE statement\n        self._execute(\n            f\"\"\"\n            UPDATE {table_name}\n            SET {data_placeholders}\n            WHERE {update_criteria};\n            \"\"\",\n            values,\n        )\n\n    def delete(self, table_name: str, criteria: dict[str, str]) -&gt; None:\n\"\"\"_summary_ : This method deletes data from the database using the 'DELETE' statement.\n\n        Parameters\n        ----------\n        table_name : str\n            _description_ : Table name to perform the statement on.\n        criteria : dict[str, str]\n            _description_ : The criteria to use as a filter on the DELETE statement, passed as a dict =&gt; {keys(criteria) : values(values)}\n        \"\"\"\n        # Creating placeholders for the provided criteria\n        placeholders = [\n            f\"{column} = ?\" for column in criteria\n        ]  #! add criteria.keys() if didn't work\n        # Joining the created placeholders with AND operator\n        delete_criteria = \" AND \".join(placeholders)\n        # Executing the DELETE statement\n        self._execute(\n            f\"\"\"\n            DELETE FROM {table_name}\n            WHERE {delete_criteria}\n            \"\"\",\n            tuple(criteria.values()),\n        )\n</code></pre> <code>__del__() -&gt; None</code> \u00b6 <p>summary : This method closes the connection with the database.</p> Source code in <code>src/database/db_manger.py</code> <pre><code>def __del__(self) -&gt; None:\n\"\"\"_summary_ : This method closes the connection with the database.\"\"\"\n    self.connection.close()\n</code></pre> <code>__init__(database_filename: Path) -&gt; None</code> \u00b6 <p>summary : Initializing a connection with the database.</p> <p>Parameters:</p> Name Type Description Default <code>database_filename</code> <code>Path</code> <p>description : A path to the database file to connect to, if doesn't exist, it will be created.</p> required Source code in <code>src/database/db_manger.py</code> <pre><code>def __init__(self, database_filename: Path) -&gt; None:\n\"\"\"_summary_ : Initializing a connection with the database.\n\n    Parameters\n    ----------\n    database_filename : Path\n        _description_ : A path to the database file to connect to, if doesn't exist, it will be created.\n    \"\"\"\n    self.connection = sqlite3.connect(database_filename, check_same_thread=False)\n</code></pre> <code>add(table_name: str, data: dict[str, str]) -&gt; None</code> \u00b6 <p>summary : This method adds data into the database using the 'INSERT INTO' SQL statement.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>description : Table name to perform the statement on.</p> required <code>data</code> <code>dict[str, str]</code> <p>description : A dict of strings, specifying the columns names and the columns values to be added to the table.</p> required Source code in <code>src/database/db_manger.py</code> <pre><code>def add(self, table_name: str, data: dict[str, str]) -&gt; None:\n\"\"\"_summary_ : This method adds data into the database using the 'INSERT INTO' SQL statement.\n\n    Parameters\n    ----------\n    table_name : str\n        _description_ : Table name to perform the statement on.\n    data : dict[str, str]\n        _description_ : A dict of strings, specifying the columns names and the columns values to be added to the table.\n    \"\"\"\n    # Creating placeholders for the provided data\n    placeholders = \", \".join(\"?\" * len(data))\n    # Getting the columns names from the data: [dict] keys\n    column_names = \", \".join(data.keys())\n    # Getting the columns values from the data: [dict] values and storing them in a tuple to pass them to the _execute method\n    column_values = tuple(data.values())\n\n    # Executing the 'INSERT INTO' statement on the database, ignoring; if records already exists\n    self._execute(\n        f\"\"\"\n        INSERT OR IGNORE INTO {table_name}\n        ({column_names})\n        VALUES ({placeholders})\n        \"\"\",\n        column_values,\n    )\n</code></pre> <code>create_table(table_name: str, columns: dict[str, str]) -&gt; None</code> \u00b6 <p>summary : This method creates a table in the database if the table is note existing.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>description : The name of the table to create.</p> required <code>columns</code> <code>dict[str, str]</code> <p>description : A dict holding the columns names as a key and their types as the value</p> required Source code in <code>src/database/db_manger.py</code> <pre><code>def create_table(self, table_name: str, columns: dict[str, str]) -&gt; None:\n\"\"\"_summary_ : This method creates a table in the database if the table is note existing.\n\n    Parameters\n    ----------\n    table_name : str\n        _description_ : The name of the table to create.\n    columns : dict[str, str]\n        _description_ : A dict holding the columns names as a key and their types as the value\n\n    \"\"\"\n    # Creating a list of column followed by their data types from the provided dict\n    columns_with_types = [\n        f\"{column_name} {data_type}\" for column_name, data_type in columns.items()\n    ]\n\n    # Executing the table creation SQL statement using the provided table name and columns names\n    self._execute(\n        f\"\"\"\n            CREATE TABLE IF NOT EXISTS {table_name}\n            ({\", \".join(columns_with_types)});\n        \"\"\"\n    )\n</code></pre> <code>delete(table_name: str, criteria: dict[str, str]) -&gt; None</code> \u00b6 <p>summary : This method deletes data from the database using the 'DELETE' statement.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>description : Table name to perform the statement on.</p> required <code>criteria</code> <code>dict[str, str]</code> <p>description : The criteria to use as a filter on the DELETE statement, passed as a dict =&gt; {keys(criteria) : values(values)}</p> required Source code in <code>src/database/db_manger.py</code> <pre><code>def delete(self, table_name: str, criteria: dict[str, str]) -&gt; None:\n\"\"\"_summary_ : This method deletes data from the database using the 'DELETE' statement.\n\n    Parameters\n    ----------\n    table_name : str\n        _description_ : Table name to perform the statement on.\n    criteria : dict[str, str]\n        _description_ : The criteria to use as a filter on the DELETE statement, passed as a dict =&gt; {keys(criteria) : values(values)}\n    \"\"\"\n    # Creating placeholders for the provided criteria\n    placeholders = [\n        f\"{column} = ?\" for column in criteria\n    ]  #! add criteria.keys() if didn't work\n    # Joining the created placeholders with AND operator\n    delete_criteria = \" AND \".join(placeholders)\n    # Executing the DELETE statement\n    self._execute(\n        f\"\"\"\n        DELETE FROM {table_name}\n        WHERE {delete_criteria}\n        \"\"\",\n        tuple(criteria.values()),\n    )\n</code></pre> <code>select(table_name: str, criteria: dict[str, str] = None, order_by: str = None) -&gt; Cursor</code> \u00b6 <p>summary: : This method selects data from the database using the 'SELECT' SQL statement and returns back  data.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>description : Table name to perform the statement on.</p> required <code>criteria</code> <code>dict[str, str]</code> <p>description, by default None : The criteria to use as a filter on the SELECT statement, passed as a dict =&gt; {keys(criteria) : values(values)}</p> <code>None</code> <code>order_by</code> <code>str</code> <p>description, by default None : A column name to sort the returned query by, will map to the ORDER BY {order_by}</p> <code>None</code> <p>Returns:</p> Type Description <code>Cursor</code> <p>description : A Cursor object containing the data back from the database of any.</p> Source code in <code>src/database/db_manger.py</code> <pre><code>def select(\n    self, table_name: str, criteria: dict[str, str] = None, order_by: str = None\n) -&gt; Cursor:\n\"\"\"_summary_: : This method selects data from the database using the 'SELECT' SQL statement and returns back  data.\n\n    Parameters\n    ----------\n    table_name : str\n        _description_ : Table name to perform the statement on.\n    criteria : dict[str, str], optional\n        _description_, by default None : The criteria to use as a filter on the SELECT statement, passed as a dict =&gt; {keys(criteria) : values(values)}\n    order_by : str, optional\n        _description_, by default None : A column name to sort the returned query by, will map to the ORDER BY {order_by}\n\n    Returns\n    -------\n    Cursor\n        _description_ : A Cursor object containing the data back from the database of any.\n    \"\"\"\n    # Creating an empty dict if no criteria was provided\n    criteria = criteria or {}\n\n    # Creating the query 'SELECT' statement\n    query = f\"SELECT * FROM {table_name}\"\n\n    # If criteria was provided parse it and add placeholders for it\n    if criteria:\n        # Creating placeholders fro the provided criteria\n        placeholders = [f\"{column} = ?\" for column in criteria.keys()]\n        # Joining each statement with 'AND'\n        select_criteria = \" AND \".join(placeholders)\n        # Adding the 'select_criteria' to the query after the 'WHERE' SQL statement\n        query += f\" WHERE {select_criteria}\"\n\n    # If order_by was provided adds in a 'ORDER BY' SQL statement to sort the data\n    if order_by:\n        # Adding the 'ORDER BY' statement to the query followed by the column name to sort by\n        query += f\" ORDER BY {order_by}\"\n\n    # Executing the query and passing the criteria values to the cursor and returning back the results\n    return self._execute(query, tuple(criteria.values()))\n</code></pre> <code>update(table_name: str, criteria: dict[str, str], data: dict[str, str]) -&gt; None</code> \u00b6 <p>summary : This method updates data in the database using the 'UPDATE' statement.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>description : Table name to perform the statement on.</p> required <code>criteria</code> <code>dict[str, str]</code> <p>description : The criteria to use as a filter on the UPDATE statement, passed as a dict =&gt; {keys(criteria) : values(values)}</p> required <code>data</code> <code>dict[str, str]</code> <p>description : The actual data to update</p> required Source code in <code>src/database/db_manger.py</code> <pre><code>def update(\n    self, table_name: str, criteria: dict[str, str], data: dict[str, str]\n) -&gt; None:\n\"\"\"_summary_ : This method updates data in the database using the 'UPDATE' statement.\n\n    Parameters\n    ----------\n    table_name : str\n        _description_ : Table name to perform the statement on.\n    criteria : dict[str, str]\n        _description_ : The criteria to use as a filter on the UPDATE statement, passed as a dict =&gt; {keys(criteria) : values(values)}\n    data : dict[str, str]\n        _description_ : The actual data to update\n    \"\"\"\n    # Creating placeholders for the update criteria\n    placeholders = [f\"{column} = ?\" for column in criteria]\n    # Joining the placeholders with the AND operator\n    update_criteria = \" AND \".join(placeholders)\n    # Creating placeholders for the update data\n    data_placeholders = \", \".join(f\"{key} = ?\" for key in data)\n    # Creating two tuples holding the values to update and the new data to update them with\n    values = tuple(data.values()) + tuple(criteria.values())\n    # Executing the UPDATE statement\n    self._execute(\n        f\"\"\"\n        UPDATE {table_name}\n        SET {data_placeholders}\n        WHERE {update_criteria};\n        \"\"\",\n        values,\n    )\n</code></pre>"}]}